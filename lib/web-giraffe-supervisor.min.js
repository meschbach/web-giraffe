function nope(){}function CommandDispatcher(){this.handlers={},this.defaultHandler=function(a){console.warn("Unhandled command ",a)}}function Base36Namer(){this.id=0}function promise_protocol_repliesTo(a,b){function c(a,c){if(void 0===a.replyTo)return void console.warn("replyTo required on message ",a);try{if(c){if(a.transfered)throw new Error("Transfer list conflict");a.transfered=c.ports}var e,f=a.progressName;e=f?function(a){d.send({command:f,details:a})}.bind(this):nope;var g=Promise.resolve(b(a,e));g.then(function(b){var c=b.transfer?b.transfer:[];delete b.transfer,d.send({command:a.replyTo,success:!0,result:b},c)},function(b){d.send({command:a.replyTo,success:!1,error:b.toString()})})}catch(h){d.send({command:a.replyTo,success:!1,error:h.toString()})}}if(!b)throw new Error("handler required");var d=this;this.register(a,c)}function promies_protocol_withProgressAndReplyTo(a){var b=this.namer.next();a.progressName=b;var c=this;this.register(b,function(a){var b=a.details;d.onProgress(b)});var d=this.withReplyTo(a);return d.then(function(){c.unregister(b)},function(){c.unregister()}),d.onProgress=nope,d}function promise_protocol_withReplyTo(a){if(a.replyTo)throw new Error("replyTo not allowed (used by the protocol)");var b=this.namer.next(),c=this.promiseMessage(b).then(function(b){if(b.success){var c=b.result;return b.transfered&&b.transfered.length>0&&(c.transfered=b.transfered),c}throw new Error(b.error?b.error:"Command failed to properly respond for "+a.command)});a.replyTo=b;var d=a.transfer?a.transfer:[];return delete a.transfer,this.send(a,d),c}function port_linkage_send(a,b){this.port.postMessage(a,b)}function manual_timer(){var a=[],b={};return b.expiresAt=function(b,c){return a.push(c),{cancel:function(){a.splice(a.indexOf(c),1)}}},b.expireAll=function(){a.forEach(function(a){a()})},b}function real_clock_timer(){var a={};return a.expiresAt=function(a,b){var c=setTimeout(b,a);return{cancel:function(){clearTimeout(c)}}},a}function aging_lifo_queue(a){a=a||real_clock_timer();var b=[];return b.timeout=1e3,b.enqueue=function(c,d){d=d||nope;var e=a.expiresAt(b.timeout,function(){b.splice(b.lastIndexOf(f),1),d()}),f={datum:c,cancelTimer:function(){e.cancel()}};b.push(f)},b.dequeue=function(){if(0==b.length)throw new Error("empty");var a=b.pop();return a.cancelTimer(),a.datum},b}function fifo_work_pool(a,b){b=b||1;var c=[],d=aging_lifo_queue(),e=0,f={};return f.timeout=1e3,f.idling=function(a){var b=new Future;if(c.length>0){var f=c.pop();a.assign(f),b.resolve({command:"assigned"})}else d.enqueue(a,function(){b.resolve({command:"terminating"}),e--,a.terminate()});return b.promise()},f.push=function(f){if(d.length>0){var g=d.dequeue();g.assign(f)}else c.push(f),b>e&&(e++,a.newWorker())},f.shards_waiting=function(){return c.length},f}function Future(){this.resolved=!1,this.resolve=function(a){this.resolved=!0,this.value=a},this.promise=function(){if(this.resolved)return Promise.resolve(this.value);var a=new Promise(function(a){this.resolved?a(this.value):this.resolve=a}.bind(this));return a}}function spliced_sharding_strategy(a,b){var c={};return c.shard=function(c){function d(a){var c=new Future;e.push(c.promise()),b.push({completion:c,data:a})}for(var e=[];c.length>a;){var f=c.splice(0,a);d(f)}return d(c),e},c}function supervisor_protocol_client(a,b){function c(){a.start(),a.postMessage({command:supervisorProtocol.initialize})}function d(b){a.postMessage({command:supervisorProtocol.batch,batch:b})}b=b||new CommandDispatcher,b.linkChannel(a),b.register(supervisorProtocol.initialized,function(){e.initialized()}),b.register(supervisorProtocol.result,function(a){e.onResult(a.result)});var e={initialize:c,batch:d,initialized:nope,onResult:nope};return e}function supervisor_protocol_service(a,b){function c(){a.start()}function d(b){a.postMessage({command:supervisorProtocol.result,result:b})}b=b||new CommandDispatcher,b.linkChannel(a),b.register(supervisorProtocol.initialize,function(){e.initialize();a.postMessage({command:supervisorProtocol.initialized})}),b.register(supervisorProtocol.batch,function(a){e.onBatch(a.batch)});var e={start:c,completed:d,initialize:nope,onBatch:nope};return e}function RemoteWorkerFactory(a){this.dispatcher=a}function worker_factory_client(a){return new RemoteWorkerFactory(a)}function worker_factory_service(a,b){if(!b)throw new Error("Factory requried");a.repliesTo(workerFactoryProtocol.spawn,function(a){var c=a.config,d=b.spawn(c),e=Promise.resolve(d);return e})}function WorkAgentClient(a,b){this.id=a,this.cfg=b,this.dispatcher=new CommandDispatcher,this.dispatcher.usesPromises(new Base36Namer),this.idle=nope}function giraffe_supervisor(){function a(){var a="worker-"+j.next(),d=new WorkAgentClient(a,e);d.idle=function(){f.idling(d)},i[a]=d,self.Worker?c(a,d):b(a,d)}function b(a,b){d.withReplyTo({command:workerFactoryProtocol.spawn,id:a}).then(function(a){var c=a.transfered[0];b.openedChannel(c)})}function c(a,b){var c=new Worker(e.worker);c.postMessage({command:"giraffe:web-worker-init",id:a}),b.openedChannel(c,!0)}var d=new CommandDispatcher;d.usesPromises(new Base36Namer),d.defaultHandler=function(a){a.replyTo?self.postMessage({command:a.replyTo,error:"Command "+a.command+" is not implemented"}):console.error("[supervisor] Default message handler invoked for",a)};var e;d.register(supervisorProtocol.initialize,function(a){e=a.config,f=fifo_work_pool(h,(e.workers||{}).maxmium||6),g=spliced_sharding_strategy((e.sharding||{}).maximumSize||100,f)});var f,g,h;d.repliesTo("feed",function(a,b){var c=a.batch,d=g.shard(c);return d.forEach(function(a){a.then(function(a){b(a)})}),Promise.all(d).then(function(a){var b=[];return a.forEach(function(a){b=b.concat(a)}),b})}),h={newWorker:function(){a()}};var i={},j=new Base36Namer;d.linkPort(self,!0)}CommandDispatcher.prototype.register=function(a,b){this.handlers[a]=b},CommandDispatcher.prototype.unregister=function(a){delete this.handlers[a]},CommandDispatcher.prototype.dispatch=function(a,b){var c=a.command,d=this.handlers[c]||this.defaultHandler;d(a,b)},CommandDispatcher.prototype.once=function(a,b){if(!a)throw new Error("name not defined");if(!b)throw new Error("handler not defined");return this.register(a,function(c,d){this.unregister(a),b(c,d)}.bind(this)),a},CommandDispatcher.prototype.promiseMessage=function(a){if(!a)throw new Error("command name must be defined");var b,c;return this.once(a,function(a,d){if(a.transfered)throw new Error("Transfer list clobbered");d&&d.ports&&d.ports.length>0&&(a.transfered=d.ports),c?c(a):b=a}),new Promise(function(a){b?a(b):c=a})},CommandDispatcher.prototype.linkChannel=function(a){a.addEventListener("message",function(a){this.dispatch(a.data,a)}.bind(this))},Base36Namer.prototype.next=function(){var a=this.id;return this.id++,a.toString(36)},CommandDispatcher.prototype.usesPromises=function(a){a&&(this.namer=a),this.withReplyTo=promise_protocol_withReplyTo,this.withProgressAndReplyTo=promies_protocol_withProgressAndReplyTo,this.repliesTo=promise_protocol_repliesTo},CommandDispatcher.prototype.linkPort=function(a,b){this.port=a,this.send=port_linkage_send,this.linkChannel(a),b||this.port.start()},CommandDispatcher.prototype.reportUnhandled=function(a){this.defaultHandler=function(b){console.warn("[",a,"] Unhandled message: ",b)}};var supervisorProtocol={initialize:"giraffe:supervisor:initialize",initialized:"giraffe:supervisor:initialized",batch:"giraffe:supervisor:batch",result:"giraffe:supervisor:result"},workProtocol={initialize:"giraffe:work-agent:initialize",initialized:"giraffe:work-agent:initialized",started:"giraffe:work-agent:started",operation:"giraffe:work-agent:operation"},workerFactoryProtocol={spawn:"giraffe:worker-factory:spawn"};RemoteWorkerFactory.prototype.spawn=function(a){return this.dispatcher.withReplyTo({command:workerFactoryProtocol.spawn,config:a})},WorkAgentClient.prototype.openedChannel=function(a,b){if(!a)throw new Error("channel");return this.channel=a,this.dispatcher.linkPort(a,b),this.dispatcher.withReplyTo({command:workProtocol.initialize,id:this.id,config:this.cfg}).then(function(){this.idle()}.bind(this))},WorkAgentClient.prototype.dial=function(){if(!this.channel)throw new Error("no channel established to dial on");return this.channel.postMessage({command:"girafe:work-agent:initialize",id:this.id,config:this.cfg}),self},WorkAgentClient.prototype.assign_work=function(a){return this.dispatcher.withReplyTo({command:workProtocol.operation,on:a})},WorkAgentClient.prototype.assign=function(a){return this.assign_work(a.data).then(function(b){a.completion.resolve(b)})},giraffe_supervisor();