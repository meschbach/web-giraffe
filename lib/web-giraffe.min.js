function nope(){}function CommandDispatcher(){this.handlers={},this.defaultHandler=function(a){console.warn("Unhandled command ",a)}}function Base36Namer(){this.id=0}function promise_protocol_repliesTo(a,b){function c(a,c){if(void 0===a.replyTo)return void console.warn("replyTo required on message ",a);try{if(c){if(a.transfered)throw new Error("Transfer list conflict");a.transfered=c.ports}var e,f=a.progressName;e=f?function(a){d.send({command:f,details:a})}.bind(this):nope;var g=Promise.resolve(b(a,e));g.then(function(b){var c=b.transfer?b.transfer:[];delete b.transfer,d.send({command:a.replyTo,success:!0,result:b},c)},function(b){d.send({command:a.replyTo,success:!1,error:b.toString()})})}catch(h){d.send({command:a.replyTo,success:!1,error:h.toString()})}}if(!b)throw new Error("handler required");var d=this;this.register(a,c)}function promies_protocol_withProgressAndReplyTo(a){var b=this.namer.next();a.progressName=b;var c=this;this.register(b,function(a){var b=a.details;d.onProgress(b)});var d=this.withReplyTo(a);return d.then(function(){c.unregister(b)},function(){c.unregister()}),d.onProgress=nope,d}function promise_protocol_withReplyTo(a){if(a.replyTo)throw new Error("replyTo not allowed (used by the protocol)");var b=this.namer.next(),c=this.promiseMessage(b).then(function(b){if(b.success){var c=b.result;return b.transfered&&b.transfered.length>0&&(c.transfered=b.transfered),c}throw new Error(b.error?b.error:"Command failed to properly respond for "+a.command)});a.replyTo=b;var d=a.transfer?a.transfer:[];return delete a.transfer,this.send(a,d),c}function port_linkage_send(a,b){this.port.postMessage(a,b)}function supervisor_protocol_client(a,b){function c(){a.start(),a.postMessage({command:supervisorProtocol.initialize})}function d(b){a.postMessage({command:supervisorProtocol.batch,batch:b})}b=b||new CommandDispatcher,b.linkChannel(a),b.register(supervisorProtocol.initialized,function(){e.initialized()}),b.register(supervisorProtocol.result,function(a){e.onResult(a.result)});var e={initialize:c,batch:d,initialized:nope,onResult:nope};return e}function supervisor_protocol_service(a,b){function c(){a.start()}function d(b){a.postMessage({command:supervisorProtocol.result,result:b})}b=b||new CommandDispatcher,b.linkChannel(a),b.register(supervisorProtocol.initialize,function(){e.initialize();a.postMessage({command:supervisorProtocol.initialized})}),b.register(supervisorProtocol.batch,function(a){e.onBatch(a.batch)});var e={start:c,completed:d,initialize:nope,onBatch:nope};return e}function RemoteWorkerFactory(a){this.dispatcher=a}function worker_factory_client(a){return new RemoteWorkerFactory(a)}function worker_factory_service(a,b){if(!b)throw new Error("Factory requried");a.repliesTo(workerFactoryProtocol.spawn,function(a){var c=a.config,d=b.spawn(c),e=Promise.resolve(d);return e})}function Giraffe(a){this.cfg=a||{},this.cfg.worker=this.cfg.worker||{},this.cfg.worker.script=this.cfg.worker.script||"web-giraffe-worker.js",this.cfg.worker.maximum=navigator.hardwareConcurrency||6,this.pendingPromises=[],this.dispatcher=new CommandDispatcher,this.dispatcher.usesPromises(new Base36Namer),this.dispatcher.defaultHandler=function(a){console.error("Recieved invalid command: ",a)},this.dispatcher.repliesTo(workerFactoryProtocol.spawn,function(a){return new Promise(function(b){var c=new MessageChannel,d=this.cfg.worker.script,e=new Worker(d);e.addEventListener("error",function(a){console.error("Problem setting up work agent",a)}),e.postMessage({command:"giraffe:browser-worker-init",id:a.id},[c.port2]),b({transfer:[c.port1]})}.bind(this))}.bind(this)),this.namer=new Base36Namer}function web_giraffe(a){return new Giraffe(a)}CommandDispatcher.prototype.register=function(a,b){this.handlers[a]=b},CommandDispatcher.prototype.unregister=function(a){delete this.handlers[a]},CommandDispatcher.prototype.dispatch=function(a,b){var c=a.command,d=this.handlers[c]||this.defaultHandler;d(a,b)},CommandDispatcher.prototype.once=function(a,b){if(!a)throw new Error("name not defined");if(!b)throw new Error("handler not defined");return this.register(a,function(c,d){this.unregister(a),b(c,d)}.bind(this)),a},CommandDispatcher.prototype.promiseMessage=function(a){if(!a)throw new Error("command name must be defined");var b,c;return this.once(a,function(a,d){if(a.transfered)throw new Error("Transfer list clobbered");d&&d.ports&&d.ports.length>0&&(a.transfered=d.ports),c?c(a):b=a}),new Promise(function(a){b?a(b):c=a})},CommandDispatcher.prototype.linkChannel=function(a){a.addEventListener("message",function(a){this.dispatch(a.data,a)}.bind(this))},Base36Namer.prototype.next=function(){var a=this.id;return this.id++,a.toString(36)},CommandDispatcher.prototype.usesPromises=function(a){a&&(this.namer=a),this.withReplyTo=promise_protocol_withReplyTo,this.withProgressAndReplyTo=promies_protocol_withProgressAndReplyTo,this.repliesTo=promise_protocol_repliesTo},CommandDispatcher.prototype.linkPort=function(a,b){this.port=a,this.send=port_linkage_send,this.linkChannel(a),b||this.port.start()},CommandDispatcher.prototype.reportUnhandled=function(a){this.defaultHandler=function(b){console.warn("[",a,"] Unhandled message: ",b)}};var supervisorProtocol={initialize:"giraffe:supervisor:initialize",initialized:"giraffe:supervisor:initialized",batch:"giraffe:supervisor:batch",result:"giraffe:supervisor:result"},workerFactoryProtocol={spawn:"giraffe:worker-factory:spawn"};RemoteWorkerFactory.prototype.spawn=function(a){return this.dispatcher.withReplyTo({command:workerFactoryProtocol.spawn,config:a})},Giraffe.prototype.start=function(){if(!this.supervisor){var a=this.cfg.supervisor||"web-giraffe-supervisor.js";this.supervisor=new Worker(a),this.dispatcher.linkPort(this.supervisor,!0);var b={worker:this.cfg.worker,map:this.cfg.map};this.supervisor.postMessage({command:supervisorProtocol.initialize,config:b}),this.supervisor.addEventListener("error",function(a){console.warn("[supervisor] Encountered error: ",a);var b=a.message?a.message:"(unkonwn supervisor error)",c=new Error(b);this.pendingPromises.forEach(function(a){a({succes:!1,failure:c})}),this.supervisor=null}.bind(this))}},Giraffe.prototype.feed=function(a){return this.start(),this.dispatcher.withProgressAndReplyTo({command:"feed",batch:a})};