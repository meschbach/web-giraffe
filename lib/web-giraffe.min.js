!function(a,b){function c(){}function d(){this.handlers={},this.defaultHandler=function(a){console.warn("Unhandled command ",a)}}function e(){this.id=0}function f(a,b){function d(a,d){if(void 0===a.replyTo)return void console.warn("replyTo required on message ",a);try{if(d){if(a.transfered)throw new Error("Transfer list conflict");a.transfered=d.ports}var f,g=a.progressName;f=g?function(a){e.send({command:g,details:a})}.bind(this):c;var h=Promise.resolve(b(a,f));h.then(function(b){var c=b.transfer?b.transfer:[];delete b.transfer,e.send({command:a.replyTo,success:!0,result:b},c)},function(b){e.send({command:a.replyTo,success:!1,error:b.toString()})})}catch(i){e.send({command:a.replyTo,success:!1,error:i.toString()})}}if(!b)throw new Error("handler required");var e=this;this.register(a,d)}function g(a){var b=this.namer.next();a.progressName=b;var d=this;this.register(b,function(a){var b=a.details;e.onProgress(b)});var e=this.withReplyTo(a);return e.then(function(){d.unregister(b)},function(){d.unregister()}),e.onProgress=c,e}function h(a){if(a.replyTo)throw new Error("replyTo not allowed (used by the protocol)");var b=this.namer.next(),c=this.promiseMessage(b).then(function(b){if(b.success){var c=b.result;return b.transfered&&b.transfered.length>0&&(c.transfered=b.transfered),c}throw new Error(b.error?b.error:"Command failed to properly respond for "+a.command)});a.replyTo=b;var d=a.transfer?a.transfer:[];return delete a.transfer,this.send(a,d),c}function i(a,b){this.port.postMessage(a,b)}function j(a){this.dispatcher=a}function k(a){this.cfg=a||{},this.cfg.worker=this.cfg.worker||{},this.cfg.worker.script=this.cfg.worker.script||"web-giraffe-worker.js",this.cfg.worker.maximum=navigator.hardwareConcurrency||6,this.pendingPromises=[],this.dispatcher=new d,this.dispatcher.usesPromises(new e),this.dispatcher.defaultHandler=function(a){console.error("Recieved invalid command: ",a)},this.dispatcher.repliesTo(m.spawn,function(a){return new Promise(function(b){var c=new MessageChannel,d=this.cfg.worker,e=new Worker(d);e.addEventListener("error",function(a){console.error("Problem setting up work agent",a)}),e.postMessage({command:"giraffe:browser-worker-init",id:a.id},[c.port2]),b({transfer:[c.port1]})}.bind(this))}.bind(this)),this.namer=new e}b["true"]=a,d.prototype.register=function(a,b){this.handlers[a]=b},d.prototype.unregister=function(a){delete this.handlers[a]},d.prototype.dispatch=function(a,b){var c=a.command,d=this.handlers[c]||this.defaultHandler;d(a,b)},d.prototype.once=function(a,b){if(!a)throw new Error("name not defined");if(!b)throw new Error("handler not defined");return this.register(a,function(c,d){this.unregister(a),b(c,d)}.bind(this)),a},d.prototype.promiseMessage=function(a){if(!a)throw new Error("command name must be defined");var b,c;return this.once(a,function(a,d){if(a.transfered)throw new Error("Transfer list clobbered");d&&d.ports&&d.ports.length>0&&(a.transfered=d.ports),c?c(a):b=a}),new Promise(function(a){b?a(b):c=a})},d.prototype.linkChannel=function(a){a.addEventListener("message",function(a){this.dispatch(a.data,a)}.bind(this))},e.prototype.next=function(){var a=this.id;return this.id++,a.toString(36)},d.prototype.usesPromises=function(a){a&&(this.namer=a),this.withReplyTo=h,this.withProgressAndReplyTo=g,this.repliesTo=f},d.prototype.linkPort=function(a,b){this.port=a,this.send=i,this.linkChannel(a),b||this.port.start()},d.prototype.reportUnhandled=function(a){this.defaultHandler=function(b){console.warn("[",a,"] Unhandled message: ",b)}};var l={initialize:"giraffe:supervisor:initialize",initialized:"giraffe:supervisor:initialized",batch:"giraffe:supervisor:batch",result:"giraffe:supervisor:result"},m={spawn:"giraffe:worker-factory:spawn"};j.prototype.spawn=function(a){return this.dispatcher.withReplyTo({command:m.spawn,config:a})},k.prototype.start=function(){if(!this.supervisor){var a=this.cfg.supervisor||"web-giraffe-supervisor.js";this.supervisor=new Worker(a),this.dispatcher.linkPort(this.supervisor,!0);var b={worker:this.cfg.worker,map:this.cfg.map};this.supervisor.postMessage({command:l.initialize,config:b}),this.supervisor.addEventListener("error",function(a){console.warn("[supervisor] Encountered error: ",a);var b=a.message?a.message:"(unkonwn supervisor error)",c=new Error(b);this.pendingPromises.forEach(function(a){a({succes:!1,failure:c})}),this.supervisor=null}.bind(this))}},k.prototype.feed=function(a){return this.start(),this.dispatcher.withProgressAndReplyTo({command:"feed",batch:a})}}({},function(){return this}());